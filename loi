<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Romaji Converter — Enhanced</title>

  <!-- Tailwind CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <style>
    :root {
      --card-bg: #ffffff;
      --page-bg: linear-gradient(135deg,#f0f4f8,#d9e2ec);
      --accent: #6366f1;
    }
    [data-theme="dark"] {
      --card-bg: #0b1220;
      --page-bg: linear-gradient(135deg,#071029,#0f1724);
      --accent: #7c3aed;
    }

    body {
      font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
      background: var(--page-bg);
      min-height: 100vh;
    }

    .card {
      background: var(--card-bg);
      border-radius: 1rem;
      box-shadow: 0 15px 30px rgba(2,6,23,0.12);
      padding: 2rem;
      max-width: 760px;
      width: 100%;
      margin: 2rem auto;
      transition: transform .18s ease, box-shadow .18s ease;
    }
    .card:active { transform: translateY(1px); box-shadow: 0 8px 20px rgba(2,6,23,0.08); }

    /* Result box styling */
    .result-panel {
      background: linear-gradient(90deg, rgba(236,249,255,0.9), rgba(239,246,255,0.85));
      border-left: 6px solid rgba(99,102,241,0.9);
      padding: 1.25rem;
      border-radius: 0.75rem;
      box-shadow: inset 0 1px 3px rgba(0,0,0,0.03);
    }

    .result-text {
      font-weight: 800;
      font-size: 1.9rem;
      line-height: 1.05;
      letter-spacing: 0.2px;
      margin: 0.25rem 0;
      display: inline-block;
      word-break: break-word;
    }

    .word {
      display: inline-block;
      padding: 0.08rem 0.28rem;
      border-radius: 0.35rem;
      transition: background .12s ease, transform .08s ease;
      cursor: pointer;
    }
    .word:hover { transform: translateY(-2px); }
    .word.highlight {
      background: rgba(99,102,241,0.14);
      box-shadow: 0 6px 18px rgba(99,102,241,0.12);
    }

    /* history list */
    .history-item {
      display:flex; justify-content:space-between; align-items:center;
      gap:.6rem; padding:.5rem .6rem; border-radius:.5rem;
    }
    .history-item:hover { background: rgba(99,102,241,0.03); }

    .button-small { padding: .4rem .6rem; border-radius:.6rem; }

    .muted { color: #6b7280; }

    /* loading speaker */
    .loading-speaker { animation: pulse 1s infinite; opacity:0.85; }
    @keyframes pulse {
      0% { transform: scale(1); } 50% { transform: scale(1.02); } 100% { transform: scale(1); }
    }

    /* responsive */
    @media (max-width:640px){
      .result-text { font-size: 1.4rem; }
    }
  </style>
</head>
<body>

  <div class="card" id="appCard" role="main" aria-labelledby="appTitle">
    <div class="flex items-start justify-between gap-4">
      <div>
        <h1 id="appTitle" class="text-3xl font-extrabold" style="color:var(--accent)">
          <i class="fa-solid fa-language mr-2"></i> Romaji Converter
        </h1>
        <p class="text-sm muted">Chuyển số → Romaji (0 - 9,999,999). Có lịch sử, TTS, karaoke, và dark mode.</p>
      </div>

      <div class="flex items-center gap-2">
        <label class="flex items-center gap-2 text-sm muted">
          <input type="checkbox" id="autoSpeakToggle" />
          Auto-speak
        </label>

        <button id="themeToggle" class="button-small bg-gray-100 hover:bg-gray-200 text-sm px-3">
          <i class="fa-solid fa-moon"></i>
        </button>
      </div>
    </div>

    <!-- input area -->
    <div class="mt-6 grid grid-cols-1 sm:grid-cols-3 gap-4 items-center">
      <input id="numberInput" type="number" min="0" max="9999999"
             class="col-span-2 px-4 py-3 border rounded-lg focus:ring-2 focus:ring-indigo-400"
             placeholder="Nhập số (ví dụ: 361, 6665)">

      <button id="convertButton" class="bg-gradient-to-r from-indigo-600 to-indigo-400 text-white font-bold py-3 rounded-lg hover:shadow-lg">
        <i class="fa-solid fa-arrow-right mr-2"></i> Chuyển Đổi Ngay
      </button>
    </div>

    <!-- result area -->
    <div id="resultArea" class="mt-6 hidden">
      <div class="result-panel">
        <div class="flex justify-between items-start">
          <div>
            <p class="font-medium text-sm">Kết Quả Romaji:</p>
            <div id="resultOutput" class="result-text mt-2"></div>
            <p id="kanaOutput" class="muted text-sm mt-2"></p>
          </div>

          <div class="flex flex-col items-end space-y-2">
            <button id="speakBtn" class="button-small bg-pink-500 text-white">
              <i id="speakerIcon" class="fa-solid fa-volume-high mr-2"></i><span id="speakerText">Đọc</span>
            </button>
            <button id="copyBtn" class="button-small bg-blue-500 text-white">
              <i class="fa-regular fa-copy mr-2"></i> Sao chép
            </button>
          </div>
        </div>
      </div>

      <!-- message -->
      <div id="messageBox" class="mt-3"></div>
    </div>

    <!-- history -->
    <div class="mt-6">
      <div class="flex items-center justify-between mb-2">
        <h3 class="text-sm font-medium">Lịch sử (localStorage)</h3>
        <div class="flex items-center gap-2">
          <button id="clearHistory" class="text-sm muted hover:text-red-500"><i class="fa-solid fa-trash"></i> Xóa</button>
        </div>
      </div>
      <div id="historyList" class="space-y-2"></div>
    </div>
  </div>

  <script>
    /* ---------------------------
       Utilities & Constants
       --------------------------- */

    const MAX_HISTORY = 10;
    const LS_KEY = "romaji_converter_history_v1";
    const THEME_KEY = "romaji_converter_theme";
    const AUTO_SPEAK_KEY = "romaji_converter_auto_speak";

    // tokens we might output -> kana mapping (hiragana)
    const TOKEN_TO_HIRAGANA = {
      "zero": "ぜろ",
      "ichi": "いち",
      "ni": "に",
      "san": "さん",
      "yon": "よん",
      "shi": "し",
      "go": "ご",
      "roku": "ろく",
      "nana": "なな",
      "hachi": "はち",
      "kyuu": "きゅう",
      "juu": "じゅう",
      "hyaku": "ひゃく",
      "sanbyaku": "さんびゃく",
      "roppyaku": "ろっぴゃく",
      "happyaku": "はっぴゃく",
      "sen": "せん",
      "sanzen": "さんぜん",
      "hassen": "はっせん",
      "man": "まん",
      "ichiman": "いちまん"
    };

    /* ---------------------------
       Number -> Romaji conversion
       (based on your logic, improved)
       --------------------------- */
    const ichi = ["rei","ichi","ni","san","yon","go","roku","nana","hachi","kyuu"];
    function convertThreeDigits(n) {
      if (n === 0) return "";
      let parts = [];
      const h = Math.floor(n/100), j = Math.floor((n%100)/10), d = n%10;
      if (h>0) {
        let r;
        if (h===3) r = "sanbyaku";
        else if (h===6) r = "roppyaku";
        else if (h===8) r = "happyaku";
        else if (h===1) r = "hyaku";
        else r = ichi[h] + "hyaku";
        parts.push(r);
      }
      if (j>0) parts.push((j===1) ? "juu" : ichi[j]+"juu");
      if (d>0) parts.push(ichi[d]);
      return parts.join(" ");
    }
    function convertFourDigits(n) {
      if (n === 0) return "";
      let parts = [];
      const s = Math.floor(n/1000);
      const rem = n%1000;
      if (s>0) {
        let r;
        if (s===3) r = "sanzen";
        else if (s===8) r = "hassen";
        else if (s===1) r = "sen";
        else r = ichi[s] + "sen";
        parts.push(r);
      }
      const remR = convertThreeDigits(rem);
      if (remR) parts.push(remR);
      return parts.join(" ");
    }
    function convertNumberToRomaji(number) {
      number = parseInt(number,10);
      if (isNaN(number)) return "";
      if (number===0) return "rei";
      const manPart = Math.floor(number/10000);
      const unitPart = number%10000;
      let parts = [];
      if (manPart>0) {
        let manReading;
        if (manPart===1) manReading = "ichiman";
        else manReading = convertThreeDigits(manPart) + " man";
        parts.push(manReading);
      }
      if (unitPart>0) {
        const u = convertFourDigits(unitPart);
        if (u) parts.push(u);
      }
      let res = parts.join(" ").replace(/\bichi man\b/g,"ichiman").trim();
      // normalize spaces
      res = res.replace(/\s+/g,' ');
      return res;
    }

    /* ---------------------------
       Romaji -> Hiragana (simple token map)
       We will convert tokens we output using TOKEN_TO_HIRAGANA
       --------------------------- */
    function romajiToHiragana(romaji) {
      if (!romaji) return "";
      const tokens = romaji.split(/\s+/);
      const kanaParts = tokens.map(t => {
        const low = t.toLowerCase();
        // try direct token
        if (TOKEN_TO_HIRAGANA[low]) return TOKEN_TO_HIRAGANA[low];
        // if pattern like 'ichi' or digits fallback
        // handle simple combos like 'rokujuu' => roku + juu
        // try split at known sub-tokens
        let built = "";
        let remainder = low;
        // greedy match tokens
        while (remainder.length>0) {
          let matched = false;
          // find longest token key prefix
          const keys = Object.keys(TOKEN_TO_HIRAGANA).sort((a,b)=>b.length-a.length);
          for (const k of keys) {
            if (remainder.startsWith(k)) {
              built += TOKEN_TO_HIRAGANA[k];
              remainder = remainder.slice(k.length);
              matched = true;
              break;
            }
          }
          if (!matched) { 
            // fallback: remove first char
            built += remainder[0];
            remainder = remainder.slice(1);
          }
        }
        return built;
      });
      return kanaParts.join(' ');
    }

    /* ---------------------------
       UI & TTS logic
       --------------------------- */
    const numberInput = document.getElementById('numberInput');
    const convertButton = document.getElementById('convertButton');
    const resultArea = document.getElementById('resultArea');
    const resultOutput = document.getElementById('resultOutput');
    const kanaOutput = document.getElementById('kanaOutput');
    const speakBtn = document.getElementById('speakBtn');
    const copyBtn = document.getElementById('copyBtn');
    const messageBox = document.getElementById('messageBox');
    const historyList = document.getElementById('historyList');
    const clearHistoryBtn = document.getElementById('clearHistory');
    const autoSpeakToggle = document.getElementById('autoSpeakToggle');
    const themeToggle = document.getElementById('themeToggle');
    const appCard = document.getElementById('appCard');

    let isSpeaking = false;
    let highlightTimer = null;

    // load settings
    (function loadSettings(){
      const theme = localStorage.getItem(THEME_KEY) || 'light';
      setTheme(theme);
      const auto = localStorage.getItem(AUTO_SPEAK_KEY);
      autoSpeakToggle.checked = (auto === '1');
    })();

    function setTheme(theme){
      if (theme === 'dark') document.documentElement.setAttribute('data-theme','dark');
      else document.documentElement.removeAttribute('data-theme');
      localStorage.setItem(THEME_KEY, theme);
    }
    themeToggle.addEventListener('click', ()=>{
      const current = document.documentElement.getAttribute('data-theme') === 'dark' ? 'dark' : 'light';
      const next = current === 'dark' ? 'light' : 'dark';
      setTheme(next);
    });

    autoSpeakToggle.addEventListener('change', ()=>{
      localStorage.setItem(AUTO_SPEAK_KEY, autoSpeakToggle.checked ? '1' : '0');
    });

    function showMessage(msg, isError=true){
      messageBox.textContent = msg;
      messageBox.className = isError ? 'text-red-600 mt-3' : 'text-green-600 mt-3';
      if (!msg) messageBox.className = '';
    }

    // display romaji as word spans (clickable)
    function renderRomajiWords(romaji){
      resultOutput.innerHTML = '';
      const words = romaji.split(/\s+/).filter(Boolean);
      words.forEach((w, idx)=>{
        const span = document.createElement('span');
        span.className = 'word';
        span.textContent = w + (idx < words.length-1 ? ' ' : '');
        span.dataset.word = w;
        span.addEventListener('click', () => speakSingleWord(w, span));
        resultOutput.appendChild(span);
      });
    }

    // speak a single word
    function speakSingleWord(word, el){
      if (!('speechSynthesis' in window)) {
        showMessage('Trình duyệt không hỗ trợ TTS.', true); return;
      }
      const ut = new SpeechSynthesisUtterance(word.replace(/-/g,' '));
      ut.lang = 'ja-JP';
      ut.rate = 0.95;
      ut.onstart = ()=> el.classList.add('highlight');
      ut.onend = ()=> el.classList.remove('highlight');
      speechSynthesis.speak(ut);
    }

    // speak full romaji with karaoke-ish highlight
    function speakFullRomaji(romajiText){
      if (!('speechSynthesis' in window)) {
        showMessage('Trình duyệt không hỗ trợ TTS.', true); return;
      }
      if (!romajiText) return;
      // clear previous highlight timer
      if (highlightTimer) { clearInterval(highlightTimer); highlightTimer = null; }
      const spans = Array.from(resultOutput.querySelectorAll('.word'));
      // estimate durations per word by length (ms per char)
      const msPerChar = 110; // adjust if needed
      const durations = spans.map(s => Math.max(220, s.textContent.trim().length * msPerChar));

      // create utterance
      const u = new SpeechSynthesisUtterance(romajiText.replace(/-/g,' '));
      u.lang = 'ja-JP';
      u.rate = 0.95;
      isSpeaking = true;
      speakBtn.classList.add('loading-speaker');
      document.getElementById('speakerIcon').classList.add('fa-spin');

      // start manual highlight scheduler (approximate)
      let idx = 0;
      spans.forEach(s => s.classList.remove('highlight'));
      highlightTimer = setInterval(()=>{
        // remove previous
        spans.forEach(s => s.classList.remove('highlight'));
        if (idx < spans.length) {
          spans[idx].classList.add('highlight');
        }
        idx++;
        if (idx > spans.length) {
          clearInterval(highlightTimer);
          highlightTimer = null;
        }
      }, 250); // fast tick; actual highlights align roughly with speech

      u.onend = () => {
        isSpeaking = false;
        speakBtn.classList.remove('loading-speaker');
        document.getElementById('speakerIcon').classList.remove('fa-spin');
        spans.forEach(s => s.classList.remove('highlight'));
        if (highlightTimer) { clearInterval(highlightTimer); highlightTimer = null; }
      };

      u.onerror = (e) => {
        console.error('TTS error', e);
        isSpeaking = false;
        speakBtn.classList.remove('loading-speaker');
        document.getElementById('speakerIcon').classList.remove('fa-spin');
        showMessage('Không thể phát âm thanh.', true);
      };

      speechSynthesis.cancel(); // cancel previous
      speechSynthesis.speak(u);
    }

    // copy text to clipboard
    async function copyToClipboard(text){
      try {
        await navigator.clipboard.writeText(text);
        showMessage('Đã sao chép vào clipboard.', false);
      } catch (e) {
        console.error(e);
        showMessage('Không thể sao chép tự động. Hãy thử thủ công.', true);
      }
    }

    // history management
    function loadHistory(){
      const raw = localStorage.getItem(LS_KEY);
      if (!raw) return [];
      try { return JSON.parse(raw) || []; } catch { return []; }
    }
    function saveHistory(hist){
      localStorage.setItem(LS_KEY, JSON.stringify(hist.slice(0,MAX_HISTORY)));
    }
    function pushHistory(item){
      const hist = loadHistory();
      // remove duplicates of same number
      const filtered = hist.filter(h => h.number !== item.number);
      filtered.unshift(item);
      saveHistory(filtered);
      renderHistory();
    }
    function clearHistory(){
      localStorage.removeItem(LS_KEY);
      renderHistory();
    }
    function renderHistory(){
      const hist = loadHistory();
      historyList.innerHTML = '';
      if (!hist.length) {
        historyList.innerHTML = '<p class="muted text-sm">Chưa có lịch sử — thử chuyển đổi một số.</p>';
        return;
      }
      hist.forEach(h => {
        const row = document.createElement('div');
        row.className = 'history-item';
        row.innerHTML = `
          <div>
            <div class="text-sm font-medium">${h.number.toLocaleString()}</div>
            <div class="text-xs muted">${h.romaji}</div>
          </div>
          <div class="flex items-center gap-2">
            <button class="button-small bg-gray-100" data-action="play" title="Phát lại"><i class="fa-solid fa-play"></i></button>
            <button class="button-small bg-gray-100" data-action="copy" title="Sao chép"><i class="fa-regular fa-copy"></i></button>
          </div>
        `;
        // events
        row.querySelector('[data-action="play"]').addEventListener('click', ()=> {
          // show and speak
          showResult(h.number, h.romaji, true);
        });
        row.querySelector('[data-action="copy"]').addEventListener('click', ()=> {
          copyToClipboard(`${h.number} → ${h.romaji}`);
        });
        historyList.appendChild(row);
      });
    }

    // show result area and populate values
    function showResult(number, romaji, speak=false){
      resultArea.classList.remove('hidden');
      renderRomajiWords(romaji);
      const kana = romajiToHiragana(romaji);
      kanaOutput.textContent = kana ? `Hiragana: ${kana}` : '';
      showMessage('', false);

      // push to history
      pushHistory({ number: number, romaji: romaji });

      // auto speak if enabled OR explicit speak param
      const auto = autoSpeakToggle.checked || localStorage.getItem(AUTO_SPEAK_KEY) === '1';
      if (auto || speak) setTimeout(()=> speakFullRomaji(romaji), 200);
    }

    // handle conversion
    function handleConversion(){
      const raw = numberInput.value.trim();
      if (!raw) { showMessage('Vui lòng nhập một số.', true); return; }
      const num = parseInt(raw,10);
      if (isNaN(num) || num < 0 || num > 9999999) { showMessage('Số không hợp lệ (0 - 9,999,999).', true); return; }
      const romaji = convertNumberToRomaji(num);
      if (!romaji) { showMessage('Không thể chuyển đổi.', true); return; }
      showResult(num, romaji);
    }

    // events
    convertButton.addEventListener('click', handleConversion);
    numberInput.addEventListener('keydown', (e)=>{
      if (e.key === 'Enter') handleConversion();
    });

    speakBtn.addEventListener('click', ()=>{
      const romajiText = resultOutput.textContent.trim();
      if (!romajiText) { showMessage('Không có nội dung để đọc.', true); return; }
      if (isSpeaking) { speechSynthesis.cancel(); isSpeaking = false; }
      speakFullRomaji(romajiText);
    });

    copyBtn.addEventListener('click', ()=>{
      const rom = resultOutput.textContent.trim();
      const num = (loadHistory()[0] && loadHistory()[0].romaji === rom) ? loadHistory()[0].number : null;
      const out = num ? `${num} → ${rom}` : rom;
      copyToClipboard(out);
    });

    clearHistoryBtn.addEventListener('click', ()=>{
      if (confirm('Xóa toàn bộ lịch sử?')) clearHistory();
    });

    // keyboard shortcuts: Space = speak (when not focused on input), Ctrl/Cmd+C copy
    window.addEventListener('keydown', (e)=>{
      const active = document.activeElement;
      if (e.code === 'Space' && active !== numberInput) {
        e.preventDefault();
        speakBtn.click();
      }
      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'c' && active !== numberInput) {
        e.preventDefault();
        copyBtn.click();
      }
    });

    // initial render
    renderHistory();

    // show a helpful message about TTS support (optional)
    if (!('speechSynthesis' in window)) {
      showMessage('Lưu ý: Trình duyệt của bạn có thể không hỗ trợ phát âm thanh (Web Speech API).', true);
    }
  </script>
</body>
</html>
